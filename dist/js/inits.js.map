{"version":3,"sources":["../../src/js/utils/elements.js","../../src/js/lib/burger-menu.js","../../src/js/utils/get-focusable-elements.js","../../src/js/inits.js","../../src/js/handlers/event-handlers.js","../../src/js/lib/highlight-button.js","../../src/js/lib/update-content.js","../../src/js/lib/update-source.js","../../src/js/lib/update-image.js"],"names":["contents","document","querySelectorAll","buttons","sources","images","sourcesParent","querySelector","BurgerMenu","HTMLElement","[object Object]","super","self","this","state","Proxy","status","enabled","key","value","oldValue","processStateChange","maxWidth","parseInt","getAttribute","initialMarkup","innerHTML","render","ResizeObserver","observedItems","contentRect","width","observe","parentNode","postRender","parent","trigger","panel","root","focusableElements","console","warn","toggle","addEventListener","evt","preventDefault","contains","activeElement","forcedStatus","setAttribute","manageFocus","log","forEach","element","removeAttribute","filter","window","customElements","define","style","display","visibility","classList","add","event","target","closest","array","item","remove","updateButtons","find","dataset","content","button","updateContent","source","updateSources","showImage","image","updateImage"],"mappings":"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","sourcesContent":["export const contents = [...document.querySelectorAll(\"[data-content]\")];\nexport const buttons = [...document.querySelectorAll(\"[data-button]\")];\nexport const sources = [...document.querySelectorAll(\"[data-source]\")];\nexport const images = [...document.querySelectorAll(\"[data-image]\")];\nexport const sourcesParent = document.querySelector(\".sources\");\n","import getFocusableElements from \"../utils/get-focusable-elements.js\";\n\nclass BurgerMenu extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst self = this;\n\n\t\tthis.state = new Proxy(\n\t\t\t{\n\t\t\t\tstatus: \"open\",\n\t\t\t\tenabled: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tset(state, key, value) {\n\t\t\t\t\tconst oldValue = state[key];\n\n\t\t\t\t\tstate[key] = value;\n\t\t\t\t\tif (oldValue !== value) {\n\t\t\t\t\t\tself.processStateChange();\n\t\t\t\t\t}\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tget maxWidth() {\n\t\treturn parseInt(this.getAttribute(\"max-width\") || 9999, 10);\n\t}\n\n\tconnectedCallback() {\n\t\tthis.initialMarkup = this.innerHTML;\n\t\tthis.render();\n\n\t\tconst observer = new ResizeObserver((observedItems) => {\n\t\t\tconst { contentRect } = observedItems[0];\n\t\t\tthis.state.enabled = contentRect.width <= this.maxWidth;\n\t\t});\n\n\t\t// We want to watch the parent like a hawk\n\t\tobserver.observe(this.parentNode);\n\t}\n\n\trender() {\n\t\tthis.innerHTML = `\n\t\t\t<div class=\"burger-menu\" data-element=\"burger-root\">\n\t\t\t\t<button class=\"burger-menu__trigger\" data-element=\"burger-menu-trigger\" type=\"button\" aria-label=\"Open menu\">\n\t\t\t\t\t<span class=\"burger-menu__bar\" aria-hidden=\"true\"></span>\n\t\t\t\t</button>\n\t\t\t\t<div class=\"burger-menu__panel\" data-element=\"burger-menu-panel\">\n\t\t\t\t\t${this.initialMarkup}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\t\tthis.postRender();\n\t}\n\n\tpostRender() {\n\t\tthis.trigger = this.querySelector('[data-element=\"burger-menu-trigger\"]');\n\t\tthis.panel = this.querySelector('[data-element=\"burger-menu-panel\"]');\n\t\tthis.root = this.querySelector('[data-element=\"burger-root\"]');\n\t\tthis.focusableElements = getFocusableElements(this);\n\n\t\tif (this.trigger && this.panel) {\n\t\t\tthis.toggle();\n\n\t\t\tthis.trigger.addEventListener(\"click\", (evt) => {\n\t\t\t\tevt.preventDefault();\n\n\t\t\t\tthis.toggle();\n\t\t\t});\n\n\t\t\tdocument.addEventListener(\"focusin\", () => {\n\t\t\t\tif (!this.contains(document.activeElement)) {\n\t\t\t\t\tthis.toggle(\"closed\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.innerHTML = this.initialMarkup;\n\t}\n\n\ttoggle(forcedStatus) {\n\t\tif (forcedStatus) {\n\t\t\tif (this.state.status === forcedStatus) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.state.status = forcedStatus;\n\t\t} else {\n\t\t\tthis.state.status = this.state.status === \"closed\" ? \"open\" : \"closed\";\n\t\t}\n\t}\n\n\tprocessStateChange() {\n\t\tthis.root.setAttribute(\"status\", this.state.status);\n\t\tthis.root.setAttribute(\"enabled\", this.state.enabled ? \"true\" : \"false\");\n\n\t\tthis.manageFocus();\n\n\t\tswitch (this.state.status) {\n\t\t\tcase \"closed\":\n\t\t\t\tthis.trigger.setAttribute(\"aria-expanded\", \"false\");\n\t\t\t\tthis.trigger.setAttribute(\"aria-label\", \"Open menu\");\n\t\t\t\tbreak;\n\t\t\tcase \"open\":\n\t\t\tcase \"initial\":\n\t\t\t\tthis.trigger.setAttribute(\"aria-expanded\", \"true\");\n\t\t\t\tthis.trigger.setAttribute(\"aria-label\", \"Close menu\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"Error Process State Change\");\n\t\t}\n\t}\n\n\tmanageFocus() {\n\t\tif (!this.state.enabled) {\n\t\t\tthis.focusableElements.forEach((element) => element.removeAttribute(\"tabindex\"));\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (this.state.status) {\n\t\t\tcase \"open\":\n\t\t\t\tthis.focusableElements.forEach((element) => element.removeAttribute(\"tabindex\"));\n\t\t\t\tbreak;\n\t\t\tcase \"closed\":\n\t\t\t\t[...this.focusableElements]\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(element) => element.getAttribute(\"data-element\") !== \"burger-menu-trigger\"\n\t\t\t\t\t)\n\t\t\t\t\t.forEach((element) => element.setAttribute(\"tabindex\", \"-1\"));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"Error Manage Focus\");\n\t\t}\n\t}\n}\n\nif (\"customElements\" in window) {\n\tcustomElements.define(\"burger-menu\", BurgerMenu);\n}\n\nexport default BurgerMenu;\n","/**\n * Returns back a NodeList of focusable elements\n * that exist within the passed parent HTMLElement\n *\n * @param {HTMLElement} parent HTML element\n * @returns {NodeList} The focusable elements that we can find\n */\nexport default (parent) => {\n\tif (!parent) {\n\t\tconsole.warn(\"You need to pass a parent HTMLElement\");\n\t\treturn [];\n\t}\n\n\treturn parent.querySelectorAll(\n\t\t'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"]):not([disabled]), details:not([disabled]), summary:not(:disabled)'\n\t);\n};\n","import { handleClicks } from \"./handlers/event-handlers.js\";\nimport { sourcesParent, contents, buttons, sources, images } from \"./utils/elements.js\";\nimport BurgerMenu from \"./lib/burger-menu.js\";\n\n/**\n * Shows the initial content for the main section\n */\nfunction showInitialContent() {\n   sourcesParent.style.display = \"block\";\n   contents[0].style.visibility = \"visible\";\n   buttons[0].classList.add(\"js-active\");\n   sources[0].style.display = \"inline\";\n   images[0].style.visibility = \"visible\";\n}\n\n// Inits\nshowInitialContent();\ndocument.addEventListener(\"click\", handleClicks);\n","import { contents, buttons, sources, images } from \"../utils/elements.js\";\nimport { updateButtons } from \"../lib/highlight-button.js\";\nimport { updateContent } from \"../lib/update-content.js\";\nimport { updateSources } from \"../lib/update-source.js\";\nimport { updateImage } from \"../lib/update-image.js\";\n\n/**\n * Call functions to render the UI updates\n * @param      {<type>}  event   The event\n */\nexport function handleClicks(event) {\n   if (!event.target.closest(\"[data-button]\")) return;\n   event.preventDefault();\n   updateButtons(event, buttons);\n   updateContent(event, contents);\n   updateSources(event, sources);\n   updateImage(event, images);\n}\n","/**\n * Finds the clicked button and highlight in the UI\n * @param      {event}  event   The event\n * @param      {array}  array   The array of buttons\n */\nexport function updateButtons(event, array) {\n  array.forEach(function (item) {\n    if (item.classList.contains(\"js-active\")) {\n      item.classList.remove(\"js-active\");\n    }\n  });\n  event.target.closest(\"[data-button]\").classList.add(\"js-active\");\n}\n","/**\n * Updates the page content based on the button clicked\n * @param      {event}  event   The event\n * @param      {array}  array   The array of content items\n */\nexport function updateContent(event, array) {\n  // Hide all the items in the array\n  array.forEach(function (item) {\n    if (item.style.visibility === \"visible\") {\n      item.style.visibility = \"hidden\";\n    }\n  });\n\n  // Return and show the relevant link\n  const contentToShow = array.find((item) => {\n    return item.dataset.content === event.target.closest(\"[data-button]\").dataset.button;\n  });\n  contentToShow.style.visibility = \"visible\";\n}\n","/**\n * Updates the link to the Wikipedia link based on the button clicked\n * @param      {event}  event   The event\n * @param      {array}  array   The array of links\n */\nexport function updateSources(event, array) {\n  // Hide all items in the array\n  array.forEach(function (item) {\n    if (item.style.display === \"inline\") {\n      item.style.display = \"none\";\n    }\n  });\n  // Return and show the relevant link\n  const sourceToShow = array.find((item) => {\n    return item.dataset.source === event.target.closest(\"[data-button]\").dataset.button;\n  });\n  sourceToShow.style.display = \"inline\";\n}\n","/**\n * Updates the image based on the button clicked\n * @param      {event}  event   The event\n * @param      {array}  array   The array of images\n */\nexport function updateImage(event, array) {\n  // If the geology button is clicked\n  if (event.target.closest(\"[data-button='geology']\")) {\n    // Get the image, hide/show and return\n    const showImage = array.find((item) => {\n      return item.dataset.image === \"geology\";\n    });\n    if (showImage.style.visibility === \"visible\") {\n      showImage.style.visibility = \"hidden\";\n    }\n    showImage.style.visibility = \"visible\";\n    return;\n  }\n  // Otherwise, hide all the items in the array\n  array.forEach(function (item) {\n    if (item.style.visibility === \"visible\") {\n      item.style.visibility = \"hidden\";\n    }\n  });\n  // Return and show the relevant image\n  const imageToShow = array.find((item) => {\n    return item.dataset.image === event.target.closest(\"[data-button]\").dataset.button;\n  });\n  imageToShow.style.visibility = \"visible\";\n}\n"]}